#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLAC")]
	public partial class ShopWeddingDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCATEGORY(CATEGORY instance);
    partial void UpdateCATEGORY(CATEGORY instance);
    partial void DeleteCATEGORY(CATEGORY instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
    partial void InsertCONTRACT(CONTRACT instance);
    partial void UpdateCONTRACT(CONTRACT instance);
    partial void DeleteCONTRACT(CONTRACT instance);
    partial void InsertBILL(BILL instance);
    partial void UpdateBILL(BILL instance);
    partial void DeleteBILL(BILL instance);
    partial void InsertSTAFF(STAFF instance);
    partial void UpdateSTAFF(STAFF instance);
    partial void DeleteSTAFF(STAFF instance);
    #endregion
		
		public ShopWeddingDBDataContext() : 
				base(global::DAO.Properties.Settings.Default.QLACConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ShopWeddingDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShopWeddingDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShopWeddingDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShopWeddingDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CATEGORY> CATEGORies
		{
			get
			{
				return this.GetTable<CATEGORY>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCTs
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<CONTRACT> CONTRACTs
		{
			get
			{
				return this.GetTable<CONTRACT>();
			}
		}
		
		public System.Data.Linq.Table<BILL> BILLs
		{
			get
			{
				return this.GetTable<BILL>();
			}
		}
		
		public System.Data.Linq.Table<STAFF> STAFFs
		{
			get
			{
				return this.GetTable<STAFF>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATEGORY")]
	public partial class CATEGORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCATEGORY;
		
		private string _NAMECATEGORY;
		
		private EntitySet<PRODUCT> _PRODUCTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCATEGORYChanging(int value);
    partial void OnIDCATEGORYChanged();
    partial void OnNAMECATEGORYChanging(string value);
    partial void OnNAMECATEGORYChanged();
    #endregion
		
		public CATEGORY()
		{
			this._PRODUCTs = new EntitySet<PRODUCT>(new Action<PRODUCT>(this.attach_PRODUCTs), new Action<PRODUCT>(this.detach_PRODUCTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCATEGORY", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCATEGORY
		{
			get
			{
				return this._IDCATEGORY;
			}
			set
			{
				if ((this._IDCATEGORY != value))
				{
					this.OnIDCATEGORYChanging(value);
					this.SendPropertyChanging();
					this._IDCATEGORY = value;
					this.SendPropertyChanged("IDCATEGORY");
					this.OnIDCATEGORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAMECATEGORY", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAMECATEGORY
		{
			get
			{
				return this._NAMECATEGORY;
			}
			set
			{
				if ((this._NAMECATEGORY != value))
				{
					this.OnNAMECATEGORYChanging(value);
					this.SendPropertyChanging();
					this._NAMECATEGORY = value;
					this.SendPropertyChanged("NAMECATEGORY");
					this.OnNAMECATEGORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORY_PRODUCT", Storage="_PRODUCTs", ThisKey="IDCATEGORY", OtherKey="IDCATEGORY")]
		public EntitySet<PRODUCT> PRODUCTs
		{
			get
			{
				return this._PRODUCTs;
			}
			set
			{
				this._PRODUCTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORY = this;
		}
		
		private void detach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCUSTOMER;
		
		private string _CUSTOMERNAME;
		
		private string _EMAIL;
		
		private string _PHONENUMBER;
		
		private string _ADDRES;
		
		private string _IDCARD;
		
		private EntitySet<CONTRACT> _CONTRACTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCUSTOMERChanging(int value);
    partial void OnIDCUSTOMERChanged();
    partial void OnCUSTOMERNAMEChanging(string value);
    partial void OnCUSTOMERNAMEChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnPHONENUMBERChanging(string value);
    partial void OnPHONENUMBERChanged();
    partial void OnADDRESChanging(string value);
    partial void OnADDRESChanged();
    partial void OnIDCARDChanging(string value);
    partial void OnIDCARDChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._CONTRACTs = new EntitySet<CONTRACT>(new Action<CONTRACT>(this.attach_CONTRACTs), new Action<CONTRACT>(this.detach_CONTRACTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCUSTOMER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCUSTOMER
		{
			get
			{
				return this._IDCUSTOMER;
			}
			set
			{
				if ((this._IDCUSTOMER != value))
				{
					this.OnIDCUSTOMERChanging(value);
					this.SendPropertyChanging();
					this._IDCUSTOMER = value;
					this.SendPropertyChanged("IDCUSTOMER");
					this.OnIDCUSTOMERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUSTOMERNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CUSTOMERNAME
		{
			get
			{
				return this._CUSTOMERNAME;
			}
			set
			{
				if ((this._CUSTOMERNAME != value))
				{
					this.OnCUSTOMERNAMEChanging(value);
					this.SendPropertyChanging();
					this._CUSTOMERNAME = value;
					this.SendPropertyChanged("CUSTOMERNAME");
					this.OnCUSTOMERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONENUMBER", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string PHONENUMBER
		{
			get
			{
				return this._PHONENUMBER;
			}
			set
			{
				if ((this._PHONENUMBER != value))
				{
					this.OnPHONENUMBERChanging(value);
					this.SendPropertyChanging();
					this._PHONENUMBER = value;
					this.SendPropertyChanged("PHONENUMBER");
					this.OnPHONENUMBERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRES", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ADDRES
		{
			get
			{
				return this._ADDRES;
			}
			set
			{
				if ((this._ADDRES != value))
				{
					this.OnADDRESChanging(value);
					this.SendPropertyChanging();
					this._ADDRES = value;
					this.SendPropertyChanged("ADDRES");
					this.OnADDRESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCARD", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string IDCARD
		{
			get
			{
				return this._IDCARD;
			}
			set
			{
				if ((this._IDCARD != value))
				{
					this.OnIDCARDChanging(value);
					this.SendPropertyChanging();
					this._IDCARD = value;
					this.SendPropertyChanged("IDCARD");
					this.OnIDCARDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_CONTRACT", Storage="_CONTRACTs", ThisKey="IDCUSTOMER", OtherKey="IDCUSTOMER")]
		public EntitySet<CONTRACT> CONTRACTs
		{
			get
			{
				return this._CONTRACTs;
			}
			set
			{
				this._CONTRACTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPRODUCT;
		
		private string _NAMEPRODUCT;
		
		private string _DESCRIPTIONPRODUCT;
		
		private System.Nullable<decimal> _PRICE;
		
		private System.Nullable<int> _IDCATEGORY;
		
		private string _IMAGEPRODUCT;
		
		private bool _STATUS;
		
		private EntitySet<CONTRACT> _CONTRACTs;
		
		private EntitySet<BILL> _BILLs;
		
		private EntityRef<CATEGORY> _CATEGORY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPRODUCTChanging(int value);
    partial void OnIDPRODUCTChanged();
    partial void OnNAMEPRODUCTChanging(string value);
    partial void OnNAMEPRODUCTChanged();
    partial void OnDESCRIPTIONPRODUCTChanging(string value);
    partial void OnDESCRIPTIONPRODUCTChanged();
    partial void OnPRICEChanging(System.Nullable<decimal> value);
    partial void OnPRICEChanged();
    partial void OnIDCATEGORYChanging(System.Nullable<int> value);
    partial void OnIDCATEGORYChanged();
    partial void OnIMAGEPRODUCTChanging(string value);
    partial void OnIMAGEPRODUCTChanged();
    partial void OnSTATUSChanging(bool value);
    partial void OnSTATUSChanged();
    #endregion
		
		public PRODUCT()
		{
			this._CONTRACTs = new EntitySet<CONTRACT>(new Action<CONTRACT>(this.attach_CONTRACTs), new Action<CONTRACT>(this.detach_CONTRACTs));
			this._BILLs = new EntitySet<BILL>(new Action<BILL>(this.attach_BILLs), new Action<BILL>(this.detach_BILLs));
			this._CATEGORY = default(EntityRef<CATEGORY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPRODUCT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPRODUCT
		{
			get
			{
				return this._IDPRODUCT;
			}
			set
			{
				if ((this._IDPRODUCT != value))
				{
					this.OnIDPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._IDPRODUCT = value;
					this.SendPropertyChanged("IDPRODUCT");
					this.OnIDPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAMEPRODUCT", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string NAMEPRODUCT
		{
			get
			{
				return this._NAMEPRODUCT;
			}
			set
			{
				if ((this._NAMEPRODUCT != value))
				{
					this.OnNAMEPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._NAMEPRODUCT = value;
					this.SendPropertyChanged("NAMEPRODUCT");
					this.OnNAMEPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTIONPRODUCT", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string DESCRIPTIONPRODUCT
		{
			get
			{
				return this._DESCRIPTIONPRODUCT;
			}
			set
			{
				if ((this._DESCRIPTIONPRODUCT != value))
				{
					this.OnDESCRIPTIONPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTIONPRODUCT = value;
					this.SendPropertyChanged("DESCRIPTIONPRODUCT");
					this.OnDESCRIPTIONPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Money")]
		public System.Nullable<decimal> PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCATEGORY", DbType="Int")]
		public System.Nullable<int> IDCATEGORY
		{
			get
			{
				return this._IDCATEGORY;
			}
			set
			{
				if ((this._IDCATEGORY != value))
				{
					if (this._CATEGORY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCATEGORYChanging(value);
					this.SendPropertyChanging();
					this._IDCATEGORY = value;
					this.SendPropertyChanged("IDCATEGORY");
					this.OnIDCATEGORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMAGEPRODUCT", DbType="VarChar(250)")]
		public string IMAGEPRODUCT
		{
			get
			{
				return this._IMAGEPRODUCT;
			}
			set
			{
				if ((this._IMAGEPRODUCT != value))
				{
					this.OnIMAGEPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._IMAGEPRODUCT = value;
					this.SendPropertyChanged("IMAGEPRODUCT");
					this.OnIMAGEPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUS", DbType="Bit NOT NULL")]
		public bool STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_CONTRACT", Storage="_CONTRACTs", ThisKey="IDPRODUCT", OtherKey="IDPRODUCT")]
		public EntitySet<CONTRACT> CONTRACTs
		{
			get
			{
				return this._CONTRACTs;
			}
			set
			{
				this._CONTRACTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_BILL", Storage="_BILLs", ThisKey="IDPRODUCT", OtherKey="IDPRODUCT")]
		public EntitySet<BILL> BILLs
		{
			get
			{
				return this._BILLs;
			}
			set
			{
				this._BILLs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORY_PRODUCT", Storage="_CATEGORY", ThisKey="IDCATEGORY", OtherKey="IDCATEGORY", IsForeignKey=true)]
		public CATEGORY CATEGORY
		{
			get
			{
				return this._CATEGORY.Entity;
			}
			set
			{
				CATEGORY previousValue = this._CATEGORY.Entity;
				if (((previousValue != value) 
							|| (this._CATEGORY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATEGORY.Entity = null;
						previousValue.PRODUCTs.Remove(this);
					}
					this._CATEGORY.Entity = value;
					if ((value != null))
					{
						value.PRODUCTs.Add(this);
						this._IDCATEGORY = value.IDCATEGORY;
					}
					else
					{
						this._IDCATEGORY = default(Nullable<int>);
					}
					this.SendPropertyChanged("CATEGORY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
		
		private void attach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CONTRACT")]
	public partial class CONTRACT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCONTRACT;
		
		private System.DateTime _CONTRACTDATE;
		
		private System.DateTime _DATERECEIVEPRODUCT;
		
		private System.DateTime _DATEPAY;
		
		private System.Nullable<int> _IDCUSTOMER;
		
		private System.Nullable<int> _IDSTAFF;
		
		private System.Nullable<int> _IDPRODUCT;
		
		private EntitySet<BILL> _BILLs;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
		private EntityRef<STAFF> _STAFF;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCONTRACTChanging(int value);
    partial void OnIDCONTRACTChanged();
    partial void OnCONTRACTDATEChanging(System.DateTime value);
    partial void OnCONTRACTDATEChanged();
    partial void OnDATERECEIVEPRODUCTChanging(System.DateTime value);
    partial void OnDATERECEIVEPRODUCTChanged();
    partial void OnDATEPAYChanging(System.DateTime value);
    partial void OnDATEPAYChanged();
    partial void OnIDCUSTOMERChanging(System.Nullable<int> value);
    partial void OnIDCUSTOMERChanged();
    partial void OnIDSTAFFChanging(System.Nullable<int> value);
    partial void OnIDSTAFFChanged();
    partial void OnIDPRODUCTChanging(System.Nullable<int> value);
    partial void OnIDPRODUCTChanged();
    #endregion
		
		public CONTRACT()
		{
			this._BILLs = new EntitySet<BILL>(new Action<BILL>(this.attach_BILLs), new Action<BILL>(this.detach_BILLs));
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._PRODUCT = default(EntityRef<PRODUCT>);
			this._STAFF = default(EntityRef<STAFF>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCONTRACT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCONTRACT
		{
			get
			{
				return this._IDCONTRACT;
			}
			set
			{
				if ((this._IDCONTRACT != value))
				{
					this.OnIDCONTRACTChanging(value);
					this.SendPropertyChanging();
					this._IDCONTRACT = value;
					this.SendPropertyChanged("IDCONTRACT");
					this.OnIDCONTRACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONTRACTDATE", DbType="DateTime NOT NULL")]
		public System.DateTime CONTRACTDATE
		{
			get
			{
				return this._CONTRACTDATE;
			}
			set
			{
				if ((this._CONTRACTDATE != value))
				{
					this.OnCONTRACTDATEChanging(value);
					this.SendPropertyChanging();
					this._CONTRACTDATE = value;
					this.SendPropertyChanged("CONTRACTDATE");
					this.OnCONTRACTDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATERECEIVEPRODUCT", DbType="DateTime NOT NULL")]
		public System.DateTime DATERECEIVEPRODUCT
		{
			get
			{
				return this._DATERECEIVEPRODUCT;
			}
			set
			{
				if ((this._DATERECEIVEPRODUCT != value))
				{
					this.OnDATERECEIVEPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._DATERECEIVEPRODUCT = value;
					this.SendPropertyChanged("DATERECEIVEPRODUCT");
					this.OnDATERECEIVEPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEPAY", DbType="DateTime NOT NULL")]
		public System.DateTime DATEPAY
		{
			get
			{
				return this._DATEPAY;
			}
			set
			{
				if ((this._DATEPAY != value))
				{
					this.OnDATEPAYChanging(value);
					this.SendPropertyChanging();
					this._DATEPAY = value;
					this.SendPropertyChanged("DATEPAY");
					this.OnDATEPAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCUSTOMER", DbType="Int")]
		public System.Nullable<int> IDCUSTOMER
		{
			get
			{
				return this._IDCUSTOMER;
			}
			set
			{
				if ((this._IDCUSTOMER != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCUSTOMERChanging(value);
					this.SendPropertyChanging();
					this._IDCUSTOMER = value;
					this.SendPropertyChanged("IDCUSTOMER");
					this.OnIDCUSTOMERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSTAFF", DbType="Int")]
		public System.Nullable<int> IDSTAFF
		{
			get
			{
				return this._IDSTAFF;
			}
			set
			{
				if ((this._IDSTAFF != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSTAFFChanging(value);
					this.SendPropertyChanging();
					this._IDSTAFF = value;
					this.SendPropertyChanged("IDSTAFF");
					this.OnIDSTAFFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPRODUCT", DbType="Int")]
		public System.Nullable<int> IDPRODUCT
		{
			get
			{
				return this._IDPRODUCT;
			}
			set
			{
				if ((this._IDPRODUCT != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._IDPRODUCT = value;
					this.SendPropertyChanged("IDPRODUCT");
					this.OnIDPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONTRACT_BILL", Storage="_BILLs", ThisKey="IDCONTRACT", OtherKey="IDCONTRACT")]
		public EntitySet<BILL> BILLs
		{
			get
			{
				return this._BILLs;
			}
			set
			{
				this._BILLs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_CONTRACT", Storage="_CUSTOMER", ThisKey="IDCUSTOMER", OtherKey="IDCUSTOMER", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.CONTRACTs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.CONTRACTs.Add(this);
						this._IDCUSTOMER = value.IDCUSTOMER;
					}
					else
					{
						this._IDCUSTOMER = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_CONTRACT", Storage="_PRODUCT", ThisKey="IDPRODUCT", OtherKey="IDPRODUCT", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.CONTRACTs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.CONTRACTs.Add(this);
						this._IDPRODUCT = value.IDPRODUCT;
					}
					else
					{
						this._IDPRODUCT = default(Nullable<int>);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_CONTRACT", Storage="_STAFF", ThisKey="IDSTAFF", OtherKey="IDSTAFF", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.CONTRACTs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.CONTRACTs.Add(this);
						this._IDSTAFF = value.IDSTAFF;
					}
					else
					{
						this._IDSTAFF = default(Nullable<int>);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.CONTRACT = this;
		}
		
		private void detach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.CONTRACT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BILL")]
	public partial class BILL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBILL;
		
		private System.Nullable<int> _AMOUNT;
		
		private System.DateTime _BILLINGDATE;
		
		private System.Nullable<decimal> _TOTAL;
		
		private System.Nullable<int> _IDCONTRACT;
		
		private System.Nullable<int> _IDPRODUCT;
		
		private EntityRef<CONTRACT> _CONTRACT;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBILLChanging(int value);
    partial void OnIDBILLChanged();
    partial void OnAMOUNTChanging(System.Nullable<int> value);
    partial void OnAMOUNTChanged();
    partial void OnBILLINGDATEChanging(System.DateTime value);
    partial void OnBILLINGDATEChanged();
    partial void OnTOTALChanging(System.Nullable<decimal> value);
    partial void OnTOTALChanged();
    partial void OnIDCONTRACTChanging(System.Nullable<int> value);
    partial void OnIDCONTRACTChanged();
    partial void OnIDPRODUCTChanging(System.Nullable<int> value);
    partial void OnIDPRODUCTChanged();
    #endregion
		
		public BILL()
		{
			this._CONTRACT = default(EntityRef<CONTRACT>);
			this._PRODUCT = default(EntityRef<PRODUCT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBILL", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBILL
		{
			get
			{
				return this._IDBILL;
			}
			set
			{
				if ((this._IDBILL != value))
				{
					this.OnIDBILLChanging(value);
					this.SendPropertyChanging();
					this._IDBILL = value;
					this.SendPropertyChanged("IDBILL");
					this.OnIDBILLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMOUNT", DbType="Int")]
		public System.Nullable<int> AMOUNT
		{
			get
			{
				return this._AMOUNT;
			}
			set
			{
				if ((this._AMOUNT != value))
				{
					this.OnAMOUNTChanging(value);
					this.SendPropertyChanging();
					this._AMOUNT = value;
					this.SendPropertyChanged("AMOUNT");
					this.OnAMOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BILLINGDATE", DbType="DateTime NOT NULL")]
		public System.DateTime BILLINGDATE
		{
			get
			{
				return this._BILLINGDATE;
			}
			set
			{
				if ((this._BILLINGDATE != value))
				{
					this.OnBILLINGDATEChanging(value);
					this.SendPropertyChanging();
					this._BILLINGDATE = value;
					this.SendPropertyChanged("BILLINGDATE");
					this.OnBILLINGDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTAL", DbType="Money")]
		public System.Nullable<decimal> TOTAL
		{
			get
			{
				return this._TOTAL;
			}
			set
			{
				if ((this._TOTAL != value))
				{
					this.OnTOTALChanging(value);
					this.SendPropertyChanging();
					this._TOTAL = value;
					this.SendPropertyChanged("TOTAL");
					this.OnTOTALChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCONTRACT", DbType="Int")]
		public System.Nullable<int> IDCONTRACT
		{
			get
			{
				return this._IDCONTRACT;
			}
			set
			{
				if ((this._IDCONTRACT != value))
				{
					if (this._CONTRACT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCONTRACTChanging(value);
					this.SendPropertyChanging();
					this._IDCONTRACT = value;
					this.SendPropertyChanged("IDCONTRACT");
					this.OnIDCONTRACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPRODUCT", DbType="Int")]
		public System.Nullable<int> IDPRODUCT
		{
			get
			{
				return this._IDPRODUCT;
			}
			set
			{
				if ((this._IDPRODUCT != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPRODUCTChanging(value);
					this.SendPropertyChanging();
					this._IDPRODUCT = value;
					this.SendPropertyChanged("IDPRODUCT");
					this.OnIDPRODUCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONTRACT_BILL", Storage="_CONTRACT", ThisKey="IDCONTRACT", OtherKey="IDCONTRACT", IsForeignKey=true)]
		public CONTRACT CONTRACT
		{
			get
			{
				return this._CONTRACT.Entity;
			}
			set
			{
				CONTRACT previousValue = this._CONTRACT.Entity;
				if (((previousValue != value) 
							|| (this._CONTRACT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CONTRACT.Entity = null;
						previousValue.BILLs.Remove(this);
					}
					this._CONTRACT.Entity = value;
					if ((value != null))
					{
						value.BILLs.Add(this);
						this._IDCONTRACT = value.IDCONTRACT;
					}
					else
					{
						this._IDCONTRACT = default(Nullable<int>);
					}
					this.SendPropertyChanged("CONTRACT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_BILL", Storage="_PRODUCT", ThisKey="IDPRODUCT", OtherKey="IDPRODUCT", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.BILLs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.BILLs.Add(this);
						this._IDPRODUCT = value.IDPRODUCT;
					}
					else
					{
						this._IDPRODUCT = default(Nullable<int>);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFF")]
	public partial class STAFF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSTAFF;
		
		private string _STAFFNAME;
		
		private string _EMAIL;
		
		private string _PHONENUMBER;
		
		private string _ADDRES;
		
		private string _IDCARD;
		
		private string _PASS;
		
		private bool _TYPE;
		
		private EntitySet<CONTRACT> _CONTRACTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSTAFFChanging(int value);
    partial void OnIDSTAFFChanged();
    partial void OnSTAFFNAMEChanging(string value);
    partial void OnSTAFFNAMEChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnPHONENUMBERChanging(string value);
    partial void OnPHONENUMBERChanged();
    partial void OnADDRESChanging(string value);
    partial void OnADDRESChanged();
    partial void OnIDCARDChanging(string value);
    partial void OnIDCARDChanged();
    partial void OnPASSChanging(string value);
    partial void OnPASSChanged();
    partial void OnTYPEChanging(bool value);
    partial void OnTYPEChanged();
    #endregion
		
		public STAFF()
		{
			this._CONTRACTs = new EntitySet<CONTRACT>(new Action<CONTRACT>(this.attach_CONTRACTs), new Action<CONTRACT>(this.detach_CONTRACTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSTAFF", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDSTAFF
		{
			get
			{
				return this._IDSTAFF;
			}
			set
			{
				if ((this._IDSTAFF != value))
				{
					this.OnIDSTAFFChanging(value);
					this.SendPropertyChanging();
					this._IDSTAFF = value;
					this.SendPropertyChanged("IDSTAFF");
					this.OnIDSTAFFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STAFFNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string STAFFNAME
		{
			get
			{
				return this._STAFFNAME;
			}
			set
			{
				if ((this._STAFFNAME != value))
				{
					this.OnSTAFFNAMEChanging(value);
					this.SendPropertyChanging();
					this._STAFFNAME = value;
					this.SendPropertyChanged("STAFFNAME");
					this.OnSTAFFNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONENUMBER", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string PHONENUMBER
		{
			get
			{
				return this._PHONENUMBER;
			}
			set
			{
				if ((this._PHONENUMBER != value))
				{
					this.OnPHONENUMBERChanging(value);
					this.SendPropertyChanging();
					this._PHONENUMBER = value;
					this.SendPropertyChanged("PHONENUMBER");
					this.OnPHONENUMBERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRES", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ADDRES
		{
			get
			{
				return this._ADDRES;
			}
			set
			{
				if ((this._ADDRES != value))
				{
					this.OnADDRESChanging(value);
					this.SendPropertyChanging();
					this._ADDRES = value;
					this.SendPropertyChanged("ADDRES");
					this.OnADDRESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCARD", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string IDCARD
		{
			get
			{
				return this._IDCARD;
			}
			set
			{
				if ((this._IDCARD != value))
				{
					this.OnIDCARDChanging(value);
					this.SendPropertyChanging();
					this._IDCARD = value;
					this.SendPropertyChanged("IDCARD");
					this.OnIDCARDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASS", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string PASS
		{
			get
			{
				return this._PASS;
			}
			set
			{
				if ((this._PASS != value))
				{
					this.OnPASSChanging(value);
					this.SendPropertyChanging();
					this._PASS = value;
					this.SendPropertyChanged("PASS");
					this.OnPASSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="Bit NOT NULL")]
		public bool TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this.OnTYPEChanging(value);
					this.SendPropertyChanging();
					this._TYPE = value;
					this.SendPropertyChanged("TYPE");
					this.OnTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_CONTRACT", Storage="_CONTRACTs", ThisKey="IDSTAFF", OtherKey="IDSTAFF")]
		public EntitySet<CONTRACT> CONTRACTs
		{
			get
			{
				return this._CONTRACTs;
			}
			set
			{
				this._CONTRACTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_CONTRACTs(CONTRACT entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
	}
}
#pragma warning restore 1591
